<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.atjl</groupId>
        <artifactId>common-tools-parent</artifactId>
        <version>1.0.0</version>
        <relativePath>../</relativePath>
    </parent>

    <groupId>com.atjl</groupId>
    <artifactId>common-validator</artifactId>

    <properties>
		<org.apache.maven.plugins.version>2.6</org.apache.maven.plugins.version>
		<maven-surefire-plugin>2.16</maven-surefire-plugin>
		<maven-compiler-plugin>3.1</maven-compiler-plugin>
		<maven-source-plugin>2.2.1</maven-source-plugin>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <dev.version.type>-SNAPSHOT</dev.version.type>
        <java.version>1.8</java.version>
		<springversion>4.3.5.RELEASE</springversion>
	</properties>


	<dependencies>
		<!--other pkg start -->
		<dependency>
			<groupId>com.atjl</groupId>
			<artifactId>common-util</artifactId>
			<version>${prj.version}</version>
		</dependency>
		<dependency>
			<groupId>com.atjl</groupId>
			<artifactId>common-util-ex</artifactId>
			<version>${prj.version}</version>
		</dependency>
		<!--other pkg end -->

		<!-- dom4j begin -->
		<dependency>
			<groupId>jaxen</groupId>
			<artifactId>jaxen</artifactId>
			<version>1.1.4</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>dom4j</groupId>
			<artifactId>dom4j</artifactId>
			<version>1.6.1</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<!-- spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${springversion}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<!-- tools for log -->
		<!--sl4j-->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.12</version>
		</dependency>
		<!--
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.7.12</version>
		</dependency>-->
		<!-- 代码直接调用log4j会被桥接到slf4j -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>log4j-over-slf4j</artifactId>
			<version>1.7.12</version>
		</dependency>
		<!-- 代码直接调用commons-logging会被桥接到slf4j -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>1.7.12</version>
		</dependency>
		<!-- 代码直接调用java.util.logging会被桥接到slf4j -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jul-to-slf4j</artifactId>
			<version>1.7.12</version>
		</dependency>
		<!--logback -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.1.3</version>
		</dependency>
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.3</version>
		</dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>
	</dependencies>

	<build>
		<finalName>${project.name}</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${org.apache.maven.plugins.version}</version>
				<configuration>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                    <encoding>utf-8</encoding>
                </configuration>
            </plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${maven-surefire-plugin}</version>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>${maven-source-plugin}</version>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>


			<plugin>
				<groupId>com.github.wvengen</groupId>
				<artifactId>proguard-maven-plugin</artifactId>
				<version>2.0.11</version>
				<executions>
					<execution>
						<!-- 混淆时刻，这里是打包的时候混淆-->
						<phase>package</phase>
						<goals>
							<!-- 使用插件的什么功能，当然是混淆-->
							<goal>proguard</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<!-- 是否将生成的PG文件安装部署-->
					<attach>true</attach>
					<!-- 是否混淆-->
					<obfuscate>true</obfuscate>
					<!-- 指定生成文件分类 -->
					<attachArtifactClassifier>pg</attachArtifactClassifier>
					<options>
						<!-- 不混淆所有包名，本人测试混淆后WEB项目问题实在太多，毕竟Spring配置中有大量固定写法的包名-->
						<option>-keeppackagenames</option>
						<!-- 不混淆所有的set/get方法，毕竟项目中使用的部分第三方框架（例如Shiro）会用到大量的set/get映射-->
						<option>-keepclassmembers public class * {void set*(***);*** get*();}</option>



						<!-- JDK目标版本1.8-->
						<option>-target 1.8</option>
						<!-- 不做收缩（删除注释、未被引用代码）-->
						<option>-dontshrink</option>
						<!-- 不做优化（变更代码实现逻辑）-->
						<option>-dontoptimize</option>
						<!-- 不路过非公用类文件及成员-->
						<option>-dontskipnonpubliclibraryclasses</option>
						<option>-dontskipnonpubliclibraryclassmembers</option>
						<!-- 优化时允许访问并修改有修饰符的类和类的成员 -->
						<option>-allowaccessmodification</option>
						<!-- 确定统一的混淆类的成员名称来增加混淆-->
						<option>-useuniqueclassmembernames</option>

						<!-- 不混淆所有特殊的类-->
						<option>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod</option>

						<!-- 不混淆xx包下的所有类名，且类中的方法也不混淆
						<option>-keep class com.atjl.xx.** { &lt;methods&gt;; }</option>-->

						<!-- 不混淆filter包下的所有类名，这里主要是对Shiro的路踢人过滤器混淆，对类的属性和方法进行了混淆-->
						<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.filter.** </option>
						<!-- 不混淆凭证包下的所有类名，但对类中的属性、方法进行混淆，原因是Spring配置中用到了这个类名-->
						<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.credntials.** </option>
						<!-- 混淆目的同上，这个是拦截器的包，包中有防止重复提交的拦截器-->
						<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.interceptor.** </option>
						<!-- 混淆目的同上，这个是域包，包中有用户登录域-->
						<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.realm.** </option>
						<!-- 不混淆model包中的所有类以及类的属性及方法，实体包，混淆了会导致ORM框架及前端无法识别-->
						<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.model.** {*;}</option>
						<!-- 以下两个包因为大部分是Spring管理的Bean，不对包类的类名进行混淆，但对类中的属性和方法混淆-->
						<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.service.** </option>
						<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.dao.**</option>
					</options>
					<outjar>${project.build.finalName}-pg.jar</outjar>
					<!-- 添加依赖，这里你可以按你的需要修改，这里测试只需要一个JRE的Runtime包就行了 -->
					<libs>
						<lib>${java.home}/lib/rt.jar</lib>
					</libs>
					<!-- 加载文件的过滤器，就是你的工程目录了-->
					<inFilter>com/chinatelecom/gz/wy/zhukun/shiro_spring/**</inFilter>
					<!-- 对什么东西进行加载，这里仅有classes成功，毕竟你也不可能对配置文件及JSP混淆吧-->
					<injar>classes</injar>
					<!-- 输出目录-->
					<outputDirectory>${project.build.directory}</outputDirectory>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
